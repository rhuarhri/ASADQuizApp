package com.example.rhuarhri.asadquizapp;

import android.content.Context;
import android.support.test.InstrumentationRegistry;
import android.support.test.espresso.Espresso;
import android.support.test.runner.AndroidJUnit4;

import com.example.rhuarhri.asadquizapp.Databaselayer.UserDatabase;
import com.example.rhuarhri.asadquizapp.Logiclayer.QuestionManger;
import com.example.rhuarhri.asadquizapp.customDataTypes.question;
import com.example.rhuarhri.asadquizapp.customDataTypes.user;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.nio.charset.Charset;
import java.util.Random;

import static android.support.test.espresso.action.ViewActions.typeText;
import static android.support.test.espresso.assertion.ViewAssertions.matches;
import static android.support.test.espresso.matcher.ViewMatchers.withId;
import static android.support.test.espresso.matcher.ViewMatchers.withText;
import static org.junit.Assert.*;

/**
 * Acceptance plan for the advanced analysis and design module app
 */
@RunWith(AndroidJUnit4.class)
public class ExampleInstrumentedTest {

    //the use app context auto generated by android studio
    @Test
    public void useAppContext() {
        // Context of the app under test.
        Context appContext = InstrumentationRegistry.getTargetContext();

        assertEquals("com.example.rhuarhri.asadquizapp", appContext.getPackageName());
    }

    @Test
    public void checkIsUser()
    {
        //boolean result = false;

        //fuzz testing which is introducing random data into tests
        /*
        This test creates a random password and name and uses them to try and access
        the app.
        It should fail all of the time, however their is the slim chance that it could generate the
        right name and password

         */

        byte[] randomByteData = new byte[7];

        //get random byte
        new Random().nextBytes(randomByteData);

        String name = new String(randomByteData, Charset.forName("UTF-8"));

        randomByteData = new byte[7];

        //get random byte
        new Random().nextBytes(randomByteData);

        String password = new String(randomByteData, Charset.forName("UTF-8"));

        String error = "";
        String expected = "";

        Espresso.onView(withId(R.id.UserNameET)).perform(typeText(name));
        Espresso.onView(withId(R.id.PasswordET)).perform(typeText(password));

    }


    @Test
    public void test()
    {
        Espresso.onView(withId(R.id.TitleTXT)).check(matches(withText("Welcome to this quiz app")));


    }


    @Test
    public void addUser()
    {
        String name = "fred";
        String password = "567";

        String error = "";
        String expected = "";

        user testUser = new user(name, password);

        UserDatabase userAddDB = new UserDatabase();

        /*not yet implemented
        try{
            userAddDB.addUser(testUser);
        }
        catch(Exception e)
        {
            fails to save
        }
         */
    }

    @Test
    public void addQuiz()
    {
        String QuizName = "";
        String QuizDescription = "";

        String error = "";
        String expected = "";

        /*not yet implemented

        step 1 user adds quiz info
        step 2 system checks if info not empty (fails if empty)
        step 3 system checks if quiz already exists (fails if over exists)
        step 4 system add quiz

         */

    }

    @Test
    public void updateExistingQuiz()
    {

    }

    @Test
    public void updateQuizQuestion()
    {

    }

    @Test
    public void addQuestion()
    {
        String QuizID= "";
        String Question = "Which logic gate only return 1 if both inputs are 1?";
        String AnswerA = "And";
        String AnswerB = "OR";
        String AnswerC = "XOR";
        String AnswerD = "NOT";
        int questionDisplayTime = 60;

        String error = "";
        String expected = "";

        QuestionManger QM = new QuestionManger(QuizID);

        question newQuestion = new question();

        newQuestion.setQuestion(Question);

        newQuestion.setAnswerA(AnswerA);
        newQuestion.setAnswerB(AnswerB);
        newQuestion.setAnswerC(AnswerC);
        newQuestion.setAnswerD(AnswerD);
        newQuestion.setTime(questionDisplayTime);

        newQuestion.setCorrectAnswer(true, false, false, false);



        try {
            error = QM.add(null, newQuestion);

        }
        catch(Exception e)
        {
            error = "failed to save";
        }
        assertEquals(expected, error);


    }

    @Test
    public void addEmptyQuestion()
    {
        String QuizID= "";
        String Question = "";
        String AnswerA = "";
        String AnswerB = "";
        String AnswerC = "";
        String AnswerD = "";
        int questionDisplayTime = 0;

        String error = "";
        String expected = "";

        QuestionManger QM = new QuestionManger(QuizID);

        question newQuestion = new question();

        newQuestion.setQuestion(Question);

        newQuestion.setAnswerA(AnswerA);
        newQuestion.setAnswerB(AnswerB);
        newQuestion.setAnswerC(AnswerC);
        newQuestion.setAnswerD(AnswerD);
        newQuestion.setTime(questionDisplayTime);

        newQuestion.setCorrectAnswer(true, false, false, false);



        try {
            error = QM.add(null, newQuestion);

        }
        catch(Exception e)
        {
            error = "failed to save";
        }

        //error found and question should not allowed to save
        assertNotEquals(expected, error);
        /*if error is "failed to save" then the app tried to save the data in
        the firebase data base which should not be allowed
         */
        expected = "failed to save";
        assertNotEquals(expected, error);

    }

    @Test
    public void addQuestionWithoutRightAnswerSelected()
    {
        String QuizID= "";
        String Question = "Which logic gate only return 1 if both inputs are 1?";
        String AnswerA = "And";
        String AnswerB = "OR";
        String AnswerC = "XOR";
        String AnswerD = "NOT";
        int questionDisplayTime = 60;

        String error = "";
        String expected = "";

        QuestionManger QM = new QuestionManger(QuizID);

        question newQuestion = new question();

        newQuestion.setQuestion(Question);

        newQuestion.setAnswerA(AnswerA);
        newQuestion.setAnswerB(AnswerB);
        newQuestion.setAnswerC(AnswerC);
        newQuestion.setAnswerD(AnswerD);
        newQuestion.setTime(questionDisplayTime);

        /* all questions set as wrong no right answer selected
        this might be a common thing that a user may forget to do
        */
        newQuestion.setCorrectAnswer(true, false, false, false);



        try {
            error = QM.add(null, newQuestion);

        }
        catch(Exception e)
        {
            error = "failed to save";
        }

        //error found and question should not allowed to save
        assertNotEquals(error, "");
        /*if error is "failed to save" then the app tried to save the data in
        the firebase data base which should not be allowed
         */
        expected = "failed to save";
        assertNotEquals(expected, error);
    }

    @Test
    public void answerQuizCorrectly()
    {

    }

    @Test
    public void answerQuizInCorrectly()
    {

    }

    @Test
    public void findQuiz()
    {

    }

    /*add various other tests about the lecture running the quiz
    and the students getting results
     */
}
